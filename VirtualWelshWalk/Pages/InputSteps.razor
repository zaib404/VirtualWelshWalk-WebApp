@page "/Virtual Coastal Steps"

@using DataAccess.Data
@using VirtualWelshWalk.DataAccess.Services;
@using VirtualWelshWalk.DataAccess.Models;

@inject IVirtualWalkService WalkService
@inject IPeopleService PeopleService

@if (virtualSteps == null)
{
    <p><em>Loading...</em></p>
}
else
{
    // Top Heading
    <div class="jumbotron jumbotron-fluid">
        <div class="container text-center">
            <h1>@WalkName: @virtualSteps.TotalSteps Steps</h1>
            <hr />
            <p>You have walked approximately - @virtualStepsInMiles Miles</p>
        </div>
    </div>

    if (!UserInputDailyWalk)
    {
        <div class="jumbotron jumbotron-fluid">
            <div class="container text-center">
                <EditForm class="form-group" OnValidSubmit="HandleValidSubmit" Model="@virtualSteps">
                    <DataAnnotationsValidator />

                    <h3>Enter Steps</h3>
                    <div class="col">
                        <InputNumber class="form-control" @bind-Value="virtualSteps.NewSteps" id="steps" />
                    </div>
                    <div class="col text-center">
                        <ValidationMessage For="@(() => virtualSteps.NewSteps)" />
                    </div>

                    <div class="col content text-center">
                        <button type="submit" class="btn btn-primary btn-lg btn-block">Submit</button>
                    </div>

                </EditForm>
            </div>
        </div>
    }
    else
    {
        <div class="jumbotron jumbotron-fluid">
            <div class="container text-center">
                <h1> Thank you. See your progress on the <a href="Virtual Welsh Map">Virtual Coastal Welsh Map</a> </h1>
            </div>
        </div>
    }

    if (showModalLandmarkPassed)
    {
        // Show modal/popup of user reaching a new milestone
        <div class="modal-backdrop fade show"></div>

        <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">New Area of Interest Unlocked</h5>
                        <button type="button" @onclick="() => { showModalLandmarkPassed = false; }" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>You reached a new milestone and a significant place of interest. Check your emails and the map to see more.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" @onclick="() => { showModalLandmarkPassed = false; }" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }

}

@code
{
    VirtualTotalSteps virtualSteps = new VirtualTotalSteps();
    public People dbPeople { get; set; } = new People();
    public VirtualWalk dpVirtualWalk { get; set; } = new VirtualWalk();

    string WalkName = "Welsh Coastal Walk";

    bool UserInputDailyWalk = false;

    double virtualStepsInMiles = 0;
    bool showModalLandmarkPassed = false;

    protected override async Task OnInitializedAsync()
    {
        dbPeople = await PeopleService.GetPeople();
        dpVirtualWalk = await WalkService.GetVirtualWalk(WalkName, dbPeople.PeopleId);

        virtualSteps.TotalSteps = dpVirtualWalk.TotalSteps;

        StepsInMiles();
    }

    async Task HandleValidSubmit()
    {
        dpVirtualWalk.TotalSteps += virtualSteps.NewSteps;
        await WalkService.UpdateVirtualWalk(dpVirtualWalk);
        virtualSteps.NewSteps = 0;
        virtualSteps.TotalSteps = dpVirtualWalk.TotalSteps;
        UserInputDailyWalk = true;
        StepsInMiles();
        CheckMilestone();
    }

    void StepsInMiles()
    {
        // Convert to kilometers
        double km = Math.Round(virtualSteps.TotalSteps / 1312.33595801, 2);

        virtualStepsInMiles = Math.Round(km * 0.62137, 2);
    }

    void CheckMilestone()
    {
        if (virtualSteps.TotalSteps >= 41989 && virtualSteps.TotalSteps <= 42001)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualSteps.TotalSteps >= 66923 && virtualSteps.TotalSteps <= 66935)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualSteps.TotalSteps >= 122041 && virtualSteps.TotalSteps <= 122053)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualSteps.TotalSteps >= 173183 && virtualSteps.TotalSteps <= 173195)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualSteps.TotalSteps >= 215414 && virtualSteps.TotalSteps <= 215426)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualSteps.TotalSteps >= 261884 && virtualSteps.TotalSteps <= 261896)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualSteps.TotalSteps >= 282999 && virtualSteps.TotalSteps <= 283011)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualSteps.TotalSteps >= 356923 && virtualSteps.TotalSteps <= 356935)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualSteps.TotalSteps >= 388603 && virtualSteps.TotalSteps <= 388615)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualSteps.TotalSteps >= 430847 && virtualSteps.TotalSteps <= 430859)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualSteps.TotalSteps >= 479417 && virtualSteps.TotalSteps <= 479429)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualSteps.TotalSteps >= 513209 && virtualSteps.TotalSteps <= 513221)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualSteps.TotalSteps >= 559679 && virtualSteps.TotalSteps <= 559691)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualSteps.TotalSteps >= 642041 && virtualSteps.TotalSteps <= 642053)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualSteps.TotalSteps >= 726516 && virtualSteps.TotalSteps <= 726528)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualSteps.TotalSteps >= 749758 && virtualSteps.TotalSteps <= 749770)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualStepsInMiles >= 804666 && virtualSteps.TotalSteps <= 804678)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualStepsInMiles >= 851136 && virtualSteps.TotalSteps <= 851148)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualStepsInMiles >= 878590 && virtualSteps.TotalSteps <= 878603)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualStepsInMiles >= 906044 && virtualSteps.TotalSteps <= 906056)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualStepsInMiles >= 329469 && virtualSteps.TotalSteps <= 329481)
        {
            showModalLandmarkPassed = true;
        }
        else if (virtualStepsInMiles >= 1055991 && virtualSteps.TotalSteps <= 1056003)
        {
            showModalLandmarkPassed = true;
        }
    }
}
