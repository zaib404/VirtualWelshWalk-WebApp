@page "/Virtual Coastal Steps"

@using DataAccess.Data
@using VirtualWelshWalk.DataAccess.Services;
@using VirtualWelshWalk.DataAccess.Models;

@inject IVirtualWalkService WalkService
@inject IPeopleService PeopleService
@inject IVirtualMilestonesService VirtualMilestoneService

@if (virtualSteps == null)
{
    <p><em>Loading...</em></p>
}
else
{
    // Top Heading

    <div class="container text-center">
        <h1>@WalkName: @virtualSteps.TotalSteps Steps</h1>
        <hr />
        <p>You have walked approximately - @virtualStepsInMiles Miles</p>
    </div>

    <div class="container text-center">

        <InputStepsForm virtualSteps="virtualSteps" dbPeople="dbPeople" dbVirtualWalk="dbVirtualWalk" dbMilestone="dbMilestone" OnTotalStepsChanged="() => { TotalStepsChanged(virtualSteps.TotalSteps); }" />

    </div>

    @*if (showNewMilestoneUnlocked)
        {
            // Show modal/popup of user reaching a new milestone
            <div class="modal-backdrop fade show"></div>

            <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">New Area of Interest Unlocked</h5>
                            <button type="button" @onclick="() => { showNewMilestoneUnlocked = false; }" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <p>You reached a new milestone and a significant place of interest. Check your emails and the <a href="/Virtual Coastal Map">map</a> to see more.</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" @onclick="() => { showNewMilestoneUnlocked = false; }" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        }*@

}

@code
{
    #region This gets passed over to InputStepsForm

    [Parameter]
    public People dbPeople { get; set; }

    [Parameter]
    public VirtualWalk dbVirtualWalk { get; set; }

    VirtualTotalSteps virtualSteps = new VirtualTotalSteps();

    [Parameter]
    public VirtualMilestone dbMilestone { get; set; }

    #endregion

    string WalkName = "Welsh Coastal Walk";

    double virtualStepsInMiles = 0;

    //bool showNewMilestoneUnlocked = false;

    protected override async Task OnInitializedAsync()
    {
        DBNullCheck();

        // get people db
        dbPeople = await PeopleService.GetPeople();
        // get virtual walk db
        dbVirtualWalk = await WalkService.GetVirtualWalk(WalkName, dbPeople.PeopleId);

        // get virtualmilestone table
        dbMilestone = await VirtualMilestoneService.GetVirtualMilestones(WalkName, dbPeople.PeopleId);

        virtualSteps.TotalSteps = dbVirtualWalk.TotalSteps;

        StepsInMiles();
    }

    void DBNullCheck()
    {
        if (dbPeople == null)
        {
            dbPeople = new People();
        }

        if (dbVirtualWalk == null)
        {
            dbVirtualWalk = new VirtualWalk();
        }

        if (dbMilestone == null)
        {
            dbMilestone = new VirtualMilestone();
        }
    }

    protected void TotalStepsChanged(int pNewSteps)
    {
        virtualSteps.TotalSteps = pNewSteps;
        StepsInMiles();
        //showNewMilestoneUnlocked = true;
    }

    void StepsInMiles()
    {
        // Convert to kilometers
        double km = Math.Round(virtualSteps.TotalSteps / 1312.33595801, 2);

        // Convert to miles
        virtualStepsInMiles = Math.Round(km * 0.62137, 2);
    }
}
