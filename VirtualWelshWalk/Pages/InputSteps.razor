@page "/Add Steps"

@using DataAccess.Data
@using VirtualWelshWalk.DataAccess.Services;
@using VirtualWelshWalk.DataAccess.Models;

@inject IVirtualWalkService WalkService
@inject IPeopleService PeopleService
@inject IVirtualMilestonesService VirtualMilestoneService

@if (virtualSteps == null)
{
    <p><em>Loading...</em></p>
}
else
{
    // Top Heading
    <div class="container text-center p-5">
        <h1 class="widow-orpah-me">@Localizer[HeadingWalkName]: @virtualSteps.TotalSteps @Localizer["Steps"]</h1>
        <hr />
        <p class="widow-orpah-me">@Localizer["You have walked approximately"] - @virtualStepsInMiles @Localizer["Miles"].ToString().ToLower()</p>
    </div>

    <div class="container text-center pb-5">

        <InputStepsForm virtualSteps="virtualSteps" dbPeople="dbPeople" dbVirtualWalk="dbVirtualWalk" dbMilestone="dbMilestone" OnTotalStepsChanged="@TotalStepsChanged" />  @*() => { TotalStepsChanged(virtualSteps.TotalSteps); }*@<!--" />-->

    </div>
}

@code
{
    #region This gets passed over to InputStepsForm

    [Parameter]
    public People dbPeople { get; set; }

    [Parameter]
    public VirtualWalk dbVirtualWalk { get; set; }

    VirtualTotalSteps virtualSteps = new VirtualTotalSteps();

    [Parameter]
    public VirtualMilestone dbMilestone { get; set; }

    #endregion

    string WalkName = "Welsh coastal walk";
    string HeadingWalkName = "Coastal walk";

    double virtualStepsInMiles = 0;

    //bool showNewMilestoneUnlocked = false;

    protected override async Task OnInitializedAsync()
    {
        DBNullCheck();

        // get people db
        dbPeople = await PeopleService.GetPeople();
        // get virtual walk db
        dbVirtualWalk = await WalkService.GetVirtualWalk(WalkName, dbPeople.PeopleId);

        // get virtualmilestone table
        dbMilestone = await VirtualMilestoneService.GetVirtualMilestones(WalkName, dbPeople.PeopleId);

        virtualSteps.TotalSteps = dbVirtualWalk.TotalSteps;

        StepsInMiles();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRunTime.InvokeVoidAsync("window.onload");
        }
    }

    void DBNullCheck()
    {
        if (dbPeople == null)
        {
            dbPeople = new People();
        }

        if (dbVirtualWalk == null)
        {
            dbVirtualWalk = new VirtualWalk();
        }

        if (dbMilestone == null)
        {
            dbMilestone = new VirtualMilestone();
        }
    }

    protected void TotalStepsChanged(int pNewSteps)
    {
        virtualSteps.TotalSteps = pNewSteps;
        StepsInMiles();
        //showNewMilestoneUnlocked = true;
    }

    void StepsInMiles()
    {
        // Convert to kilometers
        double km = Math.Round(virtualSteps.TotalSteps / 1312.33595801, 2);

        // Convert to miles
        virtualStepsInMiles = Math.Round(km * 0.62137, 2);
    }
}
