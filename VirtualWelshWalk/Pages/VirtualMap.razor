@page "/Virtual Welsh Map"

@using DataAccess.Data
@using VirtualWelshWalk.DataAccess.Services;
@using VirtualWelshWalk.DataAccess.Models;

@inject IVirtualWalkService WalkService
@inject IPeopleService PeopleService
@inject IJSRuntime jsRunTime

<link href='https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.css' rel='stylesheet' />

<style>
    .marker {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 19 19' height='19' width='19'%3E%3Ctitle%3Epitch-15.svg%3C/title%3E%3Crect fill='none' x='0' y='0' width='19' height='19'%3E%3C/rect%3E%3Cpath fill='%23000' transform='translate(2 2)' d='M5,3C4.4477,3,4,2.5523,4,2s0.4477-1,1-1s1,0.4477,1,1S5.5523,3,5,3z M12.5,10H10L9,7L8,5.25L9,5l2.3,1l0,0 c0.2761,0.1105,0.5895-0.0239,0.7-0.3S11.9761,5.1105,11.7,5l0,0L9,4H7L5,5L4,6H2.5C2.2239,6,2,6.2239,2,6.5S2.2239,7,2.5,7H5l1-1 l1,2l-2,2v3.5C5,13.7761,5.2239,14,5.5,14S6,13.7761,6,13.5v-3.11L8,9l1,2h3.5c0.2761,0,0.5-0.2239,0.5-0.5S12.7761,10,12.5,10z'%3E%3C/path%3E%3C/svg%3E");
        background-size: cover;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        cursor: pointer;
    }
</style>

<h3>VirtualMap</h3>

@if (virtualWalk.Equals(null))
{
    <p>Loading...</p>
}
else
{
    <br />
    <br />
    <br />
    <p id="demo">  test  @err</p>
    <br />
    <br />
    <br />
    <div @ref="mapElement" id="map" style="position:fixed; width: 50%; height: 50%;"></div>
}

@code
{
    public People people { get; set; } = new People();
    public VirtualWalk virtualWalk { get; set; } = new VirtualWalk();
    string WalkName = "Welsh Coastal Walk";

    ElementReference mapElement;
    IJSObjectReference mapModule, mapInstance;
    string err = "";

    CalculatePersonsPosition calculatePerson = new CalculatePersonsPosition();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            mapModule = await jsRunTime.InvokeAsync<IJSObjectReference>(
               "import", "./scripts/MapBox.js").AsTask();
            mapInstance = await mapModule.InvokeAsync<IJSObjectReference>(
                "initialize", mapElement).AsTask();

            StateHasChanged();
        }

        if (virtualWalk != null && mapModule != null)
        {
            await UpdatePersonLocation();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        people = await PeopleService.GetPeople();
        virtualWalk = await WalkService.GetVirtualWalk(WalkName, people.PeopleId);
    }

    async Task UpdatePersonLocation()
    {
        if (virtualWalk.TotalSteps >= 0)
        {
            try
            {
                await mapModule.InvokeVoidAsync("updatePersonIcon", calculatePerson.NewPosition(virtualWalk.TotalSteps));

            }
            catch (Exception e)
            {

                err = e.Message.ToString();
            }
        }
    }
}
