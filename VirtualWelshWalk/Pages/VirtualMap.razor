@page "/Virtual Coastal Map"

@using DataAccess.Data
@using VirtualWelshWalk.DataAccess.Services;
@using VirtualWelshWalk.DataAccess.Models;

@inject IVirtualWalkService WalkService
@inject IPeopleService PeopleService
@inject IJSRuntime jsRunTime

@implements IAsyncDisposable

<link href='https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.css' rel='stylesheet' />

<style>
    .marker {
        background-size: cover;
        cursor: pointer;
        background-position: center;
        background-repeat: no-repeat;
        top: -30px;
    }

    #map {
        height: 500px;
        width: 100%;
    }
</style>

@if (virtualWalk.Equals(null))
{
    <p>Loading...</p>
}
else
{
    <div class="jumbotron jumbotron-fluid">
        <div class="container text-center">

            <h1>Current Milestone:</h1>
            <hr />
            <h2 id="@landID">Loading...</h2>
        </div>
    </div>

    <div class="jumbotron jumbotron-fluid">
        <div class="container-fluid" style="padding-left: 5%; padding-right:5%;">
            <div class="row">
                <div class="col">
                    <div id="map" @ref="mapElement"></div>
                </div>
            </div>

            <br />
            <h4 class="text-center">
                Steps Taken: @virtualWalk.TotalSteps
            </h4>
            <hr />
            <h5 class="text-center">
                Miles Remaining Till Next Milestone: @stepToNextMilestone mi
            </h5>
        </div>
    </div>

    @if (showEnterStepsModal)
    {
        // Show modal/popup of user confirming
        <div class="modal-backdrop fade show"></div>

        <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content text-center">

                    <div class="modal-header">
                        <h2 class="modal-title text-left">Welsh Coastal Walk</h2>
                        <button type="button" @onclick="() => { showEnterStepsModal = false; }" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>

                    <div class="modal-body">
                        <InputStepsForm dbPeople="people" dbVirtualWalk="virtualWalk" OnVirtualMapSubmit="Update" />
                    </div>

                    <div class="modal-footer">
                        <button type="button" @onclick="() => { showEnterStepsModal = false; }" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code
{
    public People people { get; set; } = new People();
    public VirtualWalk virtualWalk { get; set; } = new VirtualWalk();
    CalculatePersonsPosition calculatePerson = new CalculatePersonsPosition();

    ElementReference mapElement;
    IJSObjectReference mapModule, mapInstance;

    #region elementIds
    string landID = "landID";
    #endregion

    string WalkName = "Welsh Coastal Walk";

    double stepToNextMilestone = 0;

    bool showEnterStepsModal = false;

    protected override async Task OnInitializedAsync()
    {
        people = await PeopleService.GetPeople();
        virtualWalk = await WalkService.GetVirtualWalk(WalkName, people.PeopleId);

        showEnterStepsModal = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            mapModule = await jsRunTime.InvokeAsync<IJSObjectReference>(
           "import", "./scripts/MapBox.js").AsTask();
            mapInstance = await mapModule.InvokeAsync<IJSObjectReference>(
                "initialize", mapElement).AsTask();

            if (virtualWalk != null && mapModule != null)
            {
                await UpdatePersonLocation();
            }

            StateHasChanged();
        }
    }

    async Task UpdatePersonLocation()
    {
        if (virtualWalk.TotalSteps >= 0)
        {
            await mapModule.InvokeVoidAsync("updatePersonIcon", calculatePerson.NewPosition(virtualWalk.TotalSteps)).AsTask();
            await mapModule.InvokeVoidAsync("LandMarksPassed", landID);
            stepToNextMilestone = Math.Round(await mapModule.InvokeAsync<double>("ApproximateStepsToNextMilestone"), 2);
        }
    }

    async Task Update()
    {
        showEnterStepsModal = false;
        await UpdatePersonLocation();
        await mapModule.InvokeVoidAsync("UpdateColourPath");
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (mapInstance != null)
        {
            await mapInstance.DisposeAsync();
        }

        if (mapModule != null)
        {
            await mapModule.DisposeAsync();
        }
    }
}
