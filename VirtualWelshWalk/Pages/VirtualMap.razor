@page "/Virtual Welsh Map"

@using DataAccess.Data
@using VirtualWelshWalk.DataAccess.Services;
@using VirtualWelshWalk.DataAccess.Models;

@inject IVirtualWalkService WalkService
@inject IPeopleService PeopleService
@inject IJSRuntime jsRunTime

@implements IAsyncDisposable

<link href='https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.css' rel='stylesheet' />

<style>
    .marker {
        background-size: cover;        
        cursor: pointer;
        background-position: center;
        background-repeat: no-repeat;
    }
</style>

<h3>VirtualMap</h3>

@if (virtualWalk.Equals(null))
{
    <p>Loading...</p>
}
else
{
    <div @ref="mapElement" id="map" style="position:fixed; width: 50%; height: 50%;"></div>
}

@code
{
    public People people { get; set; } = new People();
    public VirtualWalk virtualWalk { get; set; } = new VirtualWalk();
    string WalkName = "Welsh Coastal Walk";

    ElementReference mapElement;
    IJSObjectReference mapModule, mapInstance;

    CalculatePersonsPosition calculatePerson = new CalculatePersonsPosition();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            mapModule = await jsRunTime.InvokeAsync<IJSObjectReference>(
               "import", "./scripts/MapBox.js").AsTask();
            mapInstance = await mapModule.InvokeAsync<IJSObjectReference>(
                "initialize", mapElement).AsTask();

            StateHasChanged();
        }

        if (virtualWalk != null && mapModule != null)
        {
            await UpdatePersonLocation();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        people = await PeopleService.GetPeople();
        virtualWalk = await WalkService.GetVirtualWalk(WalkName, people.PeopleId);
    }

    async Task UpdatePersonLocation()
    {
        if (virtualWalk.TotalSteps >= 0)
        {
            await mapModule.InvokeVoidAsync("updatePersonIcon", calculatePerson.NewPosition(virtualWalk.TotalSteps));
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (mapInstance != null)
        {
            await mapInstance.DisposeAsync();
        }

        if (mapModule != null)
        {
            await mapModule.DisposeAsync();
        }
    }
}
