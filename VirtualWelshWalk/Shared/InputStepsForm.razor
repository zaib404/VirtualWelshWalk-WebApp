@using DataAccess.Data;
@using VirtualWelshWalk.DataAccess.Services;
@using VirtualWelshWalk.DataAccess.Models;
@using Microsoft.AspNetCore.Identity;
@using VirtualWelshWalk.Controllers;
@using System.Security.Claims;

@inject IVirtualWalkService WalkService
@inject IPeopleService PeopleService
@inject IVirtualMilestonesService MilestoneService
@inject EmailService.IEmailSender emailSender
@*@inject UserManager<User> UserManager*@
@*@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContent*@
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject EmailTemplate.Services.IRazorViewToStringRenderer _razorViewToStringRenderer

@implements IDisposable
@* edit form on valid submit change bool ShowConfirmationModal to true Which then will display a modal asking to confirm changes *@
<EditForm class="form-group" OnValidSubmit="() => ShowConfirmationModal = true" Model="@virtualSteps" method="post">
    <DataAnnotationsValidator />
    <div class="col pt-4">
        <InputNumber class="form-control" @bind-Value="virtualSteps.NewSteps" id="steps" />
    </div>
    <div class="col text-center">
        <ValidationMessage For="@(() => virtualSteps.NewSteps)" />
    </div>

    <div class="col content text-center">
        <button type="submit" class="btn btn-primary btn-lg btn-block" style="background-color:#af3182; border-color:#af3182; width:100%;">@Localizer["Submit"]</button>
    </div>

</EditForm>

@if (ShowConfirmationModal)
{
    // Show modal/popup of user confirming
    <div class="modal-backdrop fade show"></div>

    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">

                <div class="modal-header">

                    @if (virtualSteps.NewSteps == 1)
                    {
                        <h1 class="modal-title text-center widow-orpah-me">@Localizer["Add 1 step"]</h1>
                    }
                    else if (virtualSteps.NewSteps <= 99)
                    {
                        <h1 class="modal-title text-center widow-orpah-me">@Localizer["Add Num Steps1"] @virtualSteps.NewSteps @Localizer["Add Num Steps2"]</h1>
                    }
                    else
                    {
                        <h1 class="modal-title text-center widow-orpah-me">@Localizer["Add Num Steps1"] @virtualSteps.NewSteps @Localizer["Add Num Steps3"]</h1>
                    }

                    <button type="button" @onclick="() => { ShowConfirmationModal = false; }" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>

                </div>

                <div class="modal-body">
                    <p class="text-center">@Localizer["Are you sure you?"]</p>
                </div>
                <div class="modal-footer">
                    <button type="button" @onclick="() => { ShowConfirmationModal = false; }" class="btn btn-secondary" data-dismiss="modal">@Localizer["No"]</button>
                    <button type="button" @onclick="HandleValidSubmit" class="btn btn-primary" style="background-color:#af3182; border-color:#af3182;">@Localizer["Yes"]</button>
                </div>
            </div>
        </div>
    </div>
}

@if (ShowNewMilestoneUnlocked)
{
    // Show modal/popup of user reaching a new milestone
    <div class="modal-backdrop fade show"></div>

    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Localizer["Congratulations"]!</h5>
                    <button type="button" @onclick="HandleValidSubmitPart2" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p class="widow-orpah-me">@Localizer["You have reached"] @Space @Localizer[townName], @Localizer[historicalPlace]</p>
                </div>
                <div class="modal-footer">
                    <button type="button" @onclick="HandleValidSubmitPart2" class="btn btn-secondary" data-dismiss="modal">@Localizer["Close"]</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    #region Data Members

    #region Class passed around
    [Parameter]
    public VirtualTotalSteps virtualSteps { get; set; }

    [Parameter]
    public People dbPeople { get; set; }

    [Parameter]
    public VirtualWalk dbVirtualWalk { get; set; }

    [Parameter]
    public VirtualMilestone dbMilestone { get; set; }

    #endregion

    #region Events

    [Parameter]
    public EventCallback<int> OnTotalStepsChanged { get; set; }

    [Parameter]
    public EventCallback OnVirtualMapSubmit { get; set; }

    [Parameter]
    public EventCallback<int> OnVirtualMapGetInfo { get; set; }

    #endregion

    [Parameter]
    public int MilestoneCounter { get; set; }

    CheckMilestone checkMilestone;

    #region Bool

    bool ShowConfirmationModal = false;
    bool ShowNewMilestoneUnlocked = false;

    #endregion

    double virtualStepsInMiles = 0;

    #region Strings

    string Space = " ";

    string townName = "";
    string historicalPlace = "";

    #endregion

    #endregion

    #region When first loading

    protected override void OnInitialized()
    {
        if (virtualSteps == null)
        {
            virtualSteps = new VirtualTotalSteps();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        checkMilestone = new CheckMilestone(dbMilestone, emailSender, _razorViewToStringRenderer, AuthenticationStateProvider);

        await jsRunTime.InvokeVoidAsync("window.onload");
    }

    #endregion

    #region Submitting data/checking and calling parent methods

    async Task HandleValidSubmit()
    {
        ShowConfirmationModal = false;

        dbVirtualWalk.TotalSteps += virtualSteps.NewSteps;

        await WalkService.UpdateVirtualWalk(dbVirtualWalk);

        virtualSteps.NewSteps = 0;

        virtualSteps.TotalSteps = dbVirtualWalk.TotalSteps;

        ShowNewMilestoneUnlocked = checkMilestone.MilestoneCheckWithEmail(StepsInMiles(), virtualSteps.TotalSteps);
        //ShowNewMilestoneUnlocked = true;

        if (ShowNewMilestoneUnlocked)
        {
            var newMileStoneInfo = checkMilestone.GetTownAndHistoricalPlace();
            townName = newMileStoneInfo[0];
            historicalPlace = newMileStoneInfo[1];
            await MilestoneService.UpdateVirtualMilestones(checkMilestone.dbMilestone);
        }

        if (OnTotalStepsChanged.HasDelegate)
        {
            await UpdateTotalStepsChanged();
        }
    }

    async Task HandleValidSubmitPart2()
    {
        if (OnTotalStepsChanged.HasDelegate)
        {
            await UpdateTotalStepsChanged();
        }

        if (OnVirtualMapSubmit.HasDelegate)
        {
            await VirtualMapModalSubmitChanged();
        }

        if (OnVirtualMapGetInfo.HasDelegate)
        {
            await VirtualMapGetInfoChanged();
        }

        ShowNewMilestoneUnlocked = false;
    }

    async Task UpdateMilestoneInformation()
    {
        await OnVirtualMapGetInfo.InvokeAsync(checkMilestone.CheckMilestoneCounter(StepsInMiles(), virtualSteps.TotalSteps));
    }

    async Task UpdateTotalStepsChanged()
    {
        await OnTotalStepsChanged.InvokeAsync(virtualSteps.TotalSteps);
    }

    async Task VirtualMapModalSubmitChanged()
    {
        await OnVirtualMapSubmit.InvokeAsync();
    }

    async Task VirtualMapGetInfoChanged()
    {
        if (checkMilestone.Counter == 0)
        {
            virtualSteps.TotalSteps = dbVirtualWalk.TotalSteps;
            await OnVirtualMapGetInfo.InvokeAsync(checkMilestone.CheckMilestoneCounter(StepsInMiles(), virtualSteps.TotalSteps));
        }
        else
        {
            await OnVirtualMapGetInfo.InvokeAsync(checkMilestone.Counter);
        }

    }

    public async Task<int> CallVirtualMapGetInfoChanged(int pSteps)
    {
        if (virtualSteps == null)
        {
            virtualSteps = new VirtualTotalSteps();
        }

        virtualSteps.TotalSteps = pSteps;

        if (checkMilestone == null)
        {
            checkMilestone = new CheckMilestone();
        }

        var milestoneNum = checkMilestone.CheckMilestoneCounter(StepsInMiles(), virtualSteps.TotalSteps);

        if (virtualSteps.TotalSteps == 0)
        {
            if (checkMilestone.SendEmailCheck(milestoneNum))
            {
                await MilestoneService.UpdateVirtualMilestones(dbMilestone);
            }
        }

        return milestoneNum;
    }

    #endregion

    #region Misc

    double StepsInMiles()
    {
        // Convert to kilometers
        double km = Math.Round(virtualSteps.TotalSteps / 1312.33595801, 2);


        // Convert to miles
        return virtualStepsInMiles = Math.Round(km * 0.62137, 1);
    }

    public void Dispose()
    {
        //UserManager.Dispose();
    }

    #endregion

    public void SetUpFromVirtualMap(IVirtualMilestonesService milestonesService,
        VirtualMilestone pDbMilestone, EmailService.IEmailSender pEmailSender,
        EmailTemplate.Services.IRazorViewToStringRenderer razorViewToStringRenderer,
        AuthenticationStateProvider AuthenticationStateProvider)
    {
        checkMilestone = new CheckMilestone(pDbMilestone, pEmailSender, razorViewToStringRenderer, AuthenticationStateProvider);

        dbMilestone = pDbMilestone;
        MilestoneService = milestonesService;
    }
}
