@using DataAccess.Data
@using VirtualWelshWalk.DataAccess.Services;
@using VirtualWelshWalk.DataAccess.Models;

@inject IVirtualWalkService WalkService
@inject IPeopleService PeopleService

@* edit form on valid submit change bool ShowConfirmationModal to true Which then will display a modal asking to confirm changes *@ 
<EditForm class="form-group" OnValidSubmit="() => ShowConfirmationModal = true" Model="@virtualSteps" method="post">
    <DataAnnotationsValidator />

    <h3>Enter Steps</h3>
    <div class="col">
        <InputNumber class="form-control" @bind-Value="virtualSteps.NewSteps" id="steps" />
    </div>
    <div class="col text-center">
        <ValidationMessage For="@(() => virtualSteps.NewSteps)" />
    </div>

    <div class="col content text-center">
        <button type="submit" class="btn btn-primary btn-lg btn-block">Submit</button>
    </div>

</EditForm>

@if (ShowConfirmationModal)
{
    // Show modal/popup of user confirming
    <div class="modal-backdrop fade show"></div>

    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">

                <div class="modal-header">

                    <h1 class="modal-title text-center">Add @virtualSteps.NewSteps Steps</h1>

                    <button type="button" @onclick="() => { ShowConfirmationModal = false; }" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>

                </div>

                <div class="modal-body">
                    <p>Are you sure you want to add @virtualSteps.NewSteps towards your virtual walk?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" @onclick="() => { ShowConfirmationModal = false; }" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" @onclick="HandleValidSubmit" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    [Parameter]
    public VirtualTotalSteps virtualSteps { get; set; }

    [Parameter]
    public People dbPeople { get; set; }

    [Parameter]
    public VirtualWalk dbVirtualWalk { get; set; }

    [Parameter]
    public EventCallback<int> OnTotalStepsChanged { get; set; }

    bool ShowConfirmationModal = false;

    async Task HandleValidSubmit()
    {
        dbVirtualWalk.TotalSteps += virtualSteps.NewSteps;

        await WalkService.UpdateVirtualWalk(dbVirtualWalk);

        virtualSteps.NewSteps = 0;

        virtualSteps.TotalSteps = dbVirtualWalk.TotalSteps;

        ShowConfirmationModal = false;

        await UpdateTotalStepsChanged();
    }

    private async Task UpdateTotalStepsChanged()
    {
        await OnTotalStepsChanged.InvokeAsync(virtualSteps.TotalSteps);
    }
}
